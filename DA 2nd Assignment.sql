use mavenmovies;
-- 1. Retrieve the total number of rentals made in the Sakila database.
select count(rental_id) as total_numbers_of_rentals from rental;

-- 2. Find the average rental duration (in days) of movies rented from the Sakila database.
select avg(rental_duration) as average_rental_duration from film;

-- 3. Display the first name and last name of customers in uppercase.
select upper(first_name) as first_name ,upper(last_name) as last_name from customer;

-- 4. Extract the month from the rental date and display it alongside the rental ID.
select rental_id, monthname(rental_date) as month from rental;

-- 5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
select  customer_id, count(rental_id) as count_of_rentals from rental group by customer_id order by count(rental_id) desc;

-- 6. Find the total revenue generated by each store.
select sum(amount) as total_revenue, store.store_id 
from store 
inner join staff on staff.store_id=store.store_id 
inner join payment on payment.staff_id=staff.staff_id 
group by store.store_id;

-- 7. Display the title of the movie, customer s first name, and last name who rented it.

SELECT 
    title, first_name, last_name
FROM
    film f
        INNER JOIN
    inventory I ON f.film_id = i.inventory_id
        INNER JOIN
    rental r ON r.inventory_id = i.inventory_id
        INNER JOIN
    customer c ON r.customer_id = c.customer_id;
    
    
-- 8. Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
SELECT 
    CONCAT(first_name, ' ', last_name) AS actors, title
FROM
    actor a
        LEFT JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        LEFT JOIN
    film f ON fa.film_id = f.film_id
WHERE
    title = 'gone by the wind';
    
-- Group By
-- Q1. Determine the total number of rentals for each category of movies.
SELECT 
    category_id, COUNT(r.rental_id) as total_number_of_rentals
FROM
    rental r
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film_category fc ON i.film_id = fc.film_id
GROUP BY category_id
ORDER BY COUNT(rental_id) ASC;

-- Q2.Find the average rental rate of movies in each language.
SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate
FROM film f
Right JOIN language l ON f.language_id = l.language_id
GROUP BY l.name;

-- Q3.Retrieve the customer names along with the total amount they've spent on rentals.
SELECT 
    CONCAT(first_name, ' ', last_name) AS customer_name,
    SUM(amount) as total_amount_spent
FROM
    customer c
    JOIN
    payment p ON c.customer_id = p.customer_id
	join
    rental r on r.customer_id=c.customer_id
GROUP BY customer_name;

-- Q4.List the titles of movies rented by each customer in a particular city (e.g., 'London').
SELECT f.title AS rented_movie_title,concat(first_name," ",last_name) as customer
FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
where ci.city="London"
order by customer, f.title;


-- Q5. Display the top 5 rented movies along with the number of times they've been rented.

select
     title, COUNT(rental_id) as rental_count
FROM
    film f
        INNER JOIN
    inventory i ON f.film_id = i.film_id
        INNER JOIN
    rental r ON r.inventory_id = i.inventory_id
group by title
ORDER BY rental_count DESC
LIMIT 5;

-- Q6. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
SELECT c.customer_id, concat(first_name," ",last_name) as customer
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
WHERE s.store_id IN (1, 2)
GROUP BY c.customer_id, customer
HAVING COUNT(DISTINCT s.store_id) = 2;


	







